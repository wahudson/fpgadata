2017-05-27
		rpixel -- Read FPGA Pixel
		-------------------------

Document application and use of 'rpixel' program on RPi (Raspberry Pi)
with Altera DE2-115 FPGA Development board.
Try to keep it current and focused on as-implemented function.

----------------------------------------------------------------------------
##(2017-05-27)  References
----------------------------------------------------------------------------

Altera DE2-115 User Manual
    /home/var/ref/DE2_115_User_manual_2013.pdf
    http://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=English&CategoryNo=165&No=502&PartNo=4
    p. 46  Using the Expansion Header

----------------------------------------------------------------------------
##(2017-07-30)  RPi Signals
----------------------------------------------------------------------------

   RPi
   Dir  Signal      Description
   ---  --------    --------------------------------------------------------

    i   NoData      Data read is not valid, from fifo rdempty.

    i   OverFlow    Fifo overflow, previous samples are missing.
			From fifo wrfull delayed and put into fifo.
			Used to flag error, no actual recovery.

    i   MarkX       X scan mark signal.
    i   MarkY       Y scan mark signal.

    i   d3..d0      Coefficient value, big-endian nibble sequence.
			4 samples make one coefficient.

    i   d7..d6      Coefficient number.  Same for all 4 samples.

    o   ReadAck     Acknowledge RPi has read this value, fifo should
			advance to next value.
			Rising edge active.

    o   GoPixel     Signal fpga to send out one pixel worth of data.
			Rising edge active.
			Optional.  Currently use for debug.

    o   nReset      Reset FPGA state when low.  Start at first pixel.
			Optional, rpixel flushes fifo by fast reading.

    o   TrigOut     Trigger event output.  Signal things like a bad
			block of NoData (fifo rdempty) at coeff change.
			Currently signals found start of a new coefficient.
			Optional.

The FPGA fifo must be in "show-ahead mode", meaning the data out is valid
whenever fifo 'rdempty' (NoData) is low.  When high, the data is ignored.


----------------------------------------------------------------------------
##(2017-07-05)  FPGA Connections
----------------------------------------------------------------------------

Configure RPi pin modes:  (after each power-up)
    % rpixel_init
  OR
    % gpio readall
    % gpio -g mode  5 out	# GoPixel
    % gpio -g mode  6 out	# ReadAck	required
    % gpio -g mode  7 out	# nReset
    % gpio -g mode  8 out	# TrigOut

    ----------------------------------------------------------
        RPi                               |  FPGA
    Gpio   Pin Rpi/Alt  Pull  Dir Name     pin  fpga     Color
    -----  --- -------  ----  --- -------- ---- -------  -----
    Gpio0   27 ID_SD      Hi  i   .         .   .        .
    Gpio1   28 ID_SC      Hi  i   .         .   .        .
    Gpio2   03 iic1_SDA   Hi  i   .         .   .        .
    Gpio3   05 iic1_SCL   Hi  i   .         .   .        .
    Gpio4   07 GPCLK0     Hi  i   .         .   .        .
    Gpio5   29 GPCLK1     Hi   o  GoPixel   .   .        white short
    Gpio6   31 GPCLK2     Hi   o  ReadAck   09  GPIO[8]  gray
    Gpio7   26 spi0_CE1_N Hi   o  nReset    20  GPIO[17] gray
    Gpio8   24 spi0_CE0_N Hi   o  TrigOut   .   .        brown short
    Gpio9   21 spi0_MISO  Lo  i   .         .   .        .
    Gpio10  19 spi0_MOSI  Lo  i   .         .   .        .
    Gpio11  23 spi0_SCLK  Lo  i   .         .   .        .
    Gpio12  32 PWM0       Lo  i   .         .   .        .
    Gpio13  33 PWM1       Lo  i   .         .   .        .
    Gpio14  08 u0_TXD     Lo  i   .         .   .        .
    Gpio15  10 u0_RXD     Lo  i   .         .   .        .
    Gpio16  36 u0_CTS     Lo  i   d0        01  GPIO[0]  black
    Gpio17  11 u0_RTS     Lo  i   d1        02  GPIO[1]  brown
    Gpio18  12 pcm_CLK    Lo  i   d2        03  GPIO[2]  red
    Gpio19  35 pcm_FS     Lo  i   d3        04  GPIO[3]  orange
    Gpio20  38 pcm_DIN    Lo  i   d4        05  GPIO[4]  yellow
    Gpio21  40 pcm_DOUT   Lo  i   d5        06  GPIO[5]  green
    Gpio22  15 --         Lo  i   d6        07  GPIO[6]  blue
    Gpio23  16 --         Lo  i   d7        08  GPIO[7]  violet
    Gpio24  18 --         Lo  i   MarkX     15  GPIO[12] orange
    Gpio25  22 --         Lo  i   MarkY     16  GPIO[13] yellow
    Gpio26  37 --         Lo  i   OverFlow  13  GPIO[10] brown
    Gpio27  13 --         Hi  i   NoData    14  GPIO[11] white rdempty
    GND     06 --         -   -   .         .   .        .
    GND     09 --         -   -   .         .   .        .
    GND     14 --         -   -   .         .   .        .
    GND     20 --         -   -   .         .   .        .
    GND     25 --         -   -   .         .   .        .
    GND     30 --         -   -   .         .   .        .
    GND     34 --         -   -   GND       12  GND      black
    GND     39 --         -   -   .         .   .        .
    +3.3V   01 --         -   -   .         .   .        .
    +3.3V   17 --         -   -   .         .   .        .
    +5V     02 --         -   -   .         .   .        .
    +5V     04 --         -   -   .         .   .        .

    --      -- --         -   -   fifoX     17  GPIO[14] .  green  FPGA-in
    --      -- --         -   -   fifoY     18  GPIO[15] .  blue   FPGA-in
    --      -- --         -   -   .         29  +3.3V    .  red    FPGA
    --      -- --         -   -   .         30  GND      .  white  FPGA

    --      -- --         -   -   .         39  GPIO[34] .  brown  FPGA-in FrameGate

    --      -- --         -   -   .         10  GPIO[9]  .  Dead Vol=1.2V
    --      -- --         -   -   .         11  +5V      .  FPGA


FrameGate   is the Shutter Enable signal from ScanImage.

----------------------------------------------------------------------------
##(2018-08-12)  Documentation
----------------------------------------------------------------------------

    Each documentation file tries to have a specific focus, and generally
    intended as a reference.  I recommend skimming them all to get a sense of
    what each covers, then read in detail those that touch your current need.

    Here is a recommended order of reading to get started running the tools.
    Files are in the source directory tree.

Overview:
    README			top level, has catalog of tools
    trunk/README		general index of files

Building the system:
    trunk/doc/hardware.text
    trunk/doc/software.text

Running tools:
    trunk/doc/new_user.text	download, compile, setup for access to commands
    trunk/doc/rpixel.text	this user guide

    Some commands have built-in man pages:  (also in man/man1/)
    % rpixel --man
    % coeff2polar --man
    % coeff2stream --man
    % countpix --man
    % csvrow --man
    % simage --man

    R-scripts do not have --help, run with no arguments instead:
    % dotplot_polar
    % plotc16
    % plotc16loop
    % sdmean

    Some commands have no --help.  Read the script instead.
    % runplots --help
    % less bin/rpixel_init
    % less image/simage_dotplot

Inside the tools:
    trunk/src/README		catalog source files
    trunk/test/README		testing, top level
    trunk/doc/architecture.text	design concepts
    trunk/doc/plot_guide.text	Plotting with R - Getting Started
    trunk/src/*			rpixel source code, some utilities
    trunk/image/*		data processing and image generation scripts


----------------------------------------------------------------------------
##(2017-11-27)  FIFO Interface
----------------------------------------------------------------------------

Situation

    We have an adaptive filter in the FPGA running at a fixed frequency.
    The RPi process is asynchronous, and may experience process sleeps.
    How to transfer data from the FPGA to RPi without loosing any samples?

    A FIFO (First-In First-Out) buffer is used to buffer data between
    asynchronous processes.
    The Adaptive Filter puts data in the fifo at fixed frequency.
    The RPi takes data out (reads) of the fifo at a faster average rate.
    Thus the fifo should normally run nearly empty, and begin to fill only
    during RPi process sleeps.


----------------------------------------------------------------------------
##(2017-11-27)  rpixel Reading Data from FPGA
----------------------------------------------------------------------------

General comments:
    This is a custom tool set, not a polished application.
    A tool set is created as a set of individual components that can be used
    in various combinations to meet changing needs.  Each tool is focused
    on a particular task, and does not try to do everything.
    It is intended that each tool be simple enough that even a novice
    programmer could make changes to parameters or modify the algorithm to
    meet special needs.  So make changes -- you always have the original as
    a working reference.  Possibly put your changes on a git branch.

    Here I will try to describe how I have used these tools (programs).
    Intended as an example of what we actually did, with notes on possible
    alternatives.  Use it as a guide, and branch out as needed.

    Note that man pages and documentation may seem like polish, but the
    important thing is to explain concepts, context, needs, and intended
    behaviour.  This helps a lot when looking at a piece of code and
    wondering why it is the way it is.  Keep in mind the code may be
    incomplete or have mistakes with respect to the indended function.


See also:  rpixel --man

    The man page has detailed information about setup and the essential
    operation of rpixel.

Setup:
    Connect the RPi pins to the FPGA header pins.  Typically done while
    both are powered down to avoid accidents.
    We made a custom cable (6 inches long) with 40-pin female headers, which
    makes it much quicker to get all connections correct.

    Power up the RPi and FPGA board.  Order does not matter.

Install and compile:

RPi access to commands:

Initialize the RPi pin directions:
    This only needs to be done once after power up.
    % rpixel_init

Collecting data in memory:

    rpixel --npix=66000  --csv > x1.csv 2>x1.err

    rpixel --npix=66000  --stream=10 --frame=-1 > x4.csv 2> x4.err


Note memory usage:
    # Idle system, rpixel not running
    % free
		 total       used       free     shared    buffers     cached
    Mem:        945512     255096     690416       6644      22272     142384
    -/+ buffers/cache:      90440     855072
    Swap:       102396          0     102396

    # Use (--npix * 64 entry/pixel * 2 byte/entry) 256 Mbyte
    # Units displayed in 'free' are Kbytes.  Mem used went up ~256 Mbyte.
    % rpixel --npix=2048000 --repeat=2
    % free
		 total       used       free     shared    buffers     cached
    Mem:        945512     512204     433308       6676      22288     142420
    -/+ buffers/cache:     347496     598016
    Swap:       102396          0     102396

    Long as plenty of free memory remains, all is OK.  (433 Mbyte in this case)
    If swap (to the SD card) occures, not so good, may wear out the card.


----------------------------------------------------------------------------
##(2018-08-14)  Data Visualization
----------------------------------------------------------------------------

    Since the data is collected on the RPi, it would be good to get a
    quick visualization of it right there.  The idea is to aid the
    configuration and operation of your experiment.

Dot Plots:
----------
    We use R to generate dot plots from the csv data.
    https://www.r-project.org/

    See also:  doc/plot_guide.text

runplots:
---------
    This is a command to repeatedly run rpixel and make a dotplot of the
    csv output.  It updates once every second or so.  The idea is to see
    live updates of the coefficient data while you adjust your experiment.

    It plots coefficient values on the X-axis versus coefficient (csv column)
    names on the Y-axis.  The number of dots is the number of lines in the
    csv file.

    usage:  runplots  rpixel [options] --csv

    % runplots  rpixel --npix=20 --csv

    Terminate execution with <control-C>.  This might leave a hanging process,
    so check with the command "ps -f" to list processes associated with your
    terminal.

    Actually, any CSV data can be plotted in this way.
    usage:  runplots  'csv_command...'
    For example, convert rpixel output into magnitude and phase:

    % runplots  'rpixel --npix=20 --csv | coeff2polar'

    Currently there is no fancy scaling options, so the phase in radians
    is around 3, while the magnitude may be much larger.
    The idea here is showing concepts, and a little more simple programming
    can get what you want.

    See the scripts for detail usage:
	% less src/runplots
	% less src/plotc16loop

    How it works:
    The R-script 'plotc16loop' does the actual plotting, reading csv data
    from a named pipe.  The perl script 'runplots' is a top level wrapper
    that sets up the named pipe with plotc16loop reading from it, then
    repeatedly runs the given command with output redirected into the
    named pipe.


Image Generation:
-----------------

    Each row of coefficients in the csv file represents data for one pixel.
    The idea is to generate seperate images for each coefficient.

    In transforming the raw csv data into an image, many parameters typically
    need to be applied.  Thus it is most convinient to use a top level
    wrapper script to run the image command pipeline.  The script records
    your configuration, and makes it easy to rerun.

    Such a script is in "trunk/image/myrun".  Copy it and edit to suit.
    Execute it by typing the file name with a directory component, e.g.
	% ./myrun

    The template 'myrun' script runs 'rpixel' each time.  This is good for
    data collection, but probably comment it out in order to rerun just
    the 'simage' commands.

    The 'coeff2polar' converts csv coefficient pairs to magnitude and phase,
    as would be appropriate for an 8-channel lock-in amplifier.

    The 'coeff2stream' command does the real work of scaling coefficient
    values and mapping them into RGB colors.  It selects which coefficients
    to generate images for.  It has --scale and --offset options to map
    coeff values into the range {0 .. 255}, which then indexes into a color
    palette file.  Usually it takes some experimenting to find the best
    scale and offset for your data.  It also has options to select which
    edges of the scan marks to use as the beginning of a line (Xm) and
    beginning of a frame (Ym).

    The 'simage' command takes in the color stream and renders the pixels
    on the screen.  It has options --nx, --ny to set the image size in
    pixels.  It has option --wrap to select line wraping at the edges of the
    image window, or to wrap on the scan marks put in the image stream by
    'coeff2stream'.  The result is a set of image panels displayed in a
    single window.

    There are a couple of nice interactive features in 'simage':

    Button1:  Clicking the left mouse button on a pixel will report the
	x,y pixel coordenents and line number in the csv file.  This output
	is on stdout, and appears in the terminal window from which simage
	was run.

    Shift-Button1:  Hold the <shift> key and click the left mouse button
	on a pixel.  This generates a dotplot of 5 pixels on the same line
	as the selected pixel.  It assumes the coefficients are multi-channel
	lock-in pairs, converts them to magnitude and phase for display.
	The dot plot shows amplitude and phase for each coefficint pair.
	It pops up in a seperate window.

	This is very useful on the AFM (Atomic Force Microscope) to see
	a resonance peak, where each channel (coeff pair) represents a
	different frequency (ordered with higher channels at higher frequency).
	[I thought this was a pretty darn cool way to get an early look at
	AFM data!  All on a home brew system.]

	How it works:
	The R-script 'dotplot_polar' does the actual plotting of csv data into
	a pdf file, which is then displayed by the standard 'xpdf' command.
	Clicking on a pixel launches helper script 'simage_dotplot' with
	the selected pixel number.  It runs 'csvrow' to extract the selected
	5-pixels from the original csv file, converts to amplitude and phase
	with 'coeff2polar', and sends it into 'dotplot_polar'.
	The actual commands being run are shown in the terminal output of
	'simage'.

    See:
	% rpixel --man
	% coeff2polar --man
	% coeff2stream --man
	% simage --man

	% less image/dotplot_polar
	% less image/simage_dotplot
	% csvrow --man


Linux Platforms:
----------------
    All the custom commands can be run on RPi, or on a generic Linux
    workstation.

    Even rpixel can be compiled on another Linux platform and run, but it
    won't have access to the gpio pins, so will show errors on output.

    See:  doc/software.text  for the Perl-tk and R  packages needed.


----------------------------------------------------------------------------
##(2017-07-30)  Live Update Plots
----------------------------------------------------------------------------

Put symlinks in bin/ directories for the commands.  e.g.

    pi@raspberrypi:/home/pi/bin/
	plotc16loop -> /home/pi/tmp/fpgadata/trunk/src/plotc16loop
	rpixel -> /home/pi/tmp/fpgadata/trunk/bin/rpixel
	runplots -> /home/pi/tmp/fpgadata/trunk/src/runplots

    wah@laptop:/home/wah/bin/
	plotc16loop -> /home/pi/tmp/fpgadata/trunk/src/plotc16loop
	runplots -> /home/pi/tmp/fpgadata/trunk/src/runplots

Run on RPi:
    % DISPLAY=:0.0  runplots rpixel --npix=20 --csv

Run from wah laptop:
    % runplots  ssh pi@192.168.1.3  /home/pi/bin/rpixel --npix=3 --csv
    Display is on laptop, rpixel running on RPi.
    Note ssh does not run user profile.


----------------------------------------------------------------------------
##(2017-11-06)  Live Update Images
----------------------------------------------------------------------------

ssh:
    Note ssh does not run users login .profile, and PATH is set to a default
    determined by ssh.  Thus need to specify path to command.

simage:
    --npix=N controls how many input pixels are read in a batch before
    returning control to Tk (the image plotting tool).  If --npix becomes too
    large, then the image is not drawn until all data has been read, because
    the repeat timer times out and relaunches another batch read.
    This happens around --npix=500, and depends on number of images.

    Making --npix small results in simage limiting the pipeline, possibly
    causing rpixel fifo overflow.  With --npix=10, simage is clearly
    limiting.

    Note the linux pipe '|' appears to be pretty deep.


Pipeline run from laptop, ssh to RPi:
    Only rpixel runs on the RPi, the rest of pipeline runs on laptop.

    ssh pi@192.168.1.3  \~/fpgadata_bin/rpixel --npix=120000 --stream=10 |
	coeff2stream --scale=0.01 --offset=0 |
	simage --npix=200

    Idea is to make rpixel stream out as efficiently as possible on RPi.
    Hopefully rpixel will not have any long sleeps as it streams stdout
    over ssh, but of course network latency could result in blocking.

Save large dataset on laptop:
    ssh pi@192.168.1.3  \~/fpgadata_bin/rpixel --npix=256000 --stream=10 \
	> y.csv  2> y.err

